generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  netId              String           @id
  name               String
  avatar             Bytes?
  avatarType         String?

  // one-to-many relationship with Rides
  ridesOwned         Ride[]

  // many-to-many relationship with Rides
  ridesParticipated  RideParticipant[]

  sentMessages       Message[]        @relation("MessageSender")
  receivedMessages   Message[]        @relation("MessageReceiver")
  sentRequests       RideRequest[]    @relation("RequestSender")
  receivedRequests   RideRequest[]    @relation("RequestReceiver")

  // relationship for bookmarks
  bookmarks          Bookmark[]
}

model Ride {
  id                 String           @id @default(cuid())
  ownerName          String
  ownerPhone         String
  beginning          String
  destination        String
  description        String
  startTime          DateTime
  endTime            DateTime
  totalSeats         Int
  currentTakenSeats  Int
  isClosed           Boolean

  // many-to-one relationship with User
  ownerId            String
  owner              User             @relation(fields: [ownerId], references: [netId])

  // many-to-many relationship with Users
  participants       RideParticipant[]
  requests           RideRequest[]    @relation("RideRequests")

  // relationship for bookmarks
  bookmarks          Bookmark[]
}

// junction table for many-to-many relationship between User and Ride for bookmarks
model Bookmark {
  id       String   @id @default(cuid())
  userId   String
  rideId   String
  createdAt DateTime @default(now())

  user     User     @relation(fields: [userId], references: [netId])
  ride     Ride     @relation(fields: [rideId], references: [id])

  @@unique([userId, rideId])
}

// junction table for many-to-many relationship
model RideParticipant {
  netId    String
  rideId   String
  joinedAt DateTime @default(now())

  user     User     @relation(fields: [netId], references: [netId])
  ride     Ride     @relation(fields: [rideId], references: [id])

  @@id([netId, rideId])
}

model RideRequest {
  id         String   @id @default(cuid())
  rideId     String
  senderId   String
  receiverId String
  timestamp  DateTime @default(now())
  payload    String
  isAccepted Boolean  @default(false)

  ride       Ride     @relation("RideRequests", fields: [rideId], references: [id])
  sender     User     @relation("RequestSender", fields: [senderId], references: [netId])
  receiver   User     @relation("RequestReceiver", fields: [receiverId], references: [netId])
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  timestamp  DateTime @default(now())
  payload    String

  sender     User     @relation("MessageSender", fields: [senderId], references: [netId])
  receiver   User     @relation("MessageReceiver", fields: [receiverId], references: [netId])
}
