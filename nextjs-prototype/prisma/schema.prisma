// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db "
}

model User {
  netId    String   @id

  // many-to-many relationship with Rides
  rides    RideParticipant[]
  sentMessages    Message[]     @relation("MessageSender")
  receivedMessages Message[]    @relation("MessageReceiver")
  sentRequests    RideRequest[] @relation("RequestSender")
  receivedRequests RideRequest[] @relation("RequestReceiver")
}

model Ride {
  id          String   @id @default(cuid())
  ownerName   String
  ownerPhone  String
  beginning   String
  destination String
  description String
  startTime   DateTime
  endTime     DateTime
  totalSeats  Int
  currentTakenSeats Int
  isClosed    Boolean

  // many-to-many relationship with Users
  participants RideParticipant[]
  requests     RideRequest[] @relation("RideRequests")
}

// junction table for many-to-many relationship
model RideParticipant {
  userId    String
  rideId    String
  joinedAt  DateTime @default(now())

  user      User     @relation(fields: [userId], references: [netId])
  ride      Ride     @relation(fields: [rideId], references: [id])

  @@id([userId, rideId])
}

model RideRequest {
  id          String   @id @default(cuid())
  rideId      String
  senderId    String
  receiverId  String
  timestamp   DateTime @default(now())
  payload     String
  isAccepted  Boolean  @default(false)

  ride        Ride     @relation("RideRequests", fields: [rideId], references: [id])
  sender      User     @relation("RequestSender", fields: [senderId], references: [netId])
  receiver    User     @relation("RequestReceiver", fields: [receiverId], references: [netId])
}

model Message {
  id          String   @id @default(cuid())
  senderId    String
  receiverId  String
  timestamp   DateTime @default(now())
  payload     String

  sender      User     @relation("MessageSender", fields: [senderId], references: [netId])
  receiver    User     @relation("MessageReceiver", fields: [receiverId], references: [netId])
}
